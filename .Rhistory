names(subj.list) = unique.subjs
hand.list = 1:2
names(hand.list) = c("Right", "Left")
shinyApp(ui = ui_kinematics, server = server_kinematics)
server_kinematics = function(input, output){
output$kinem_plot <- renderPlot({
index = which(data$Subject == subj.list[input$subject] & data$Hand == hand.list[input$hand])
plot.dat = data$px[index,] %>% melt %>% rename(., motion = Var1, t = Var2, Px = value) %>%
mutate(Py = melt(data$py[index,])[['value']]) %>%
mutate(tar = as.character(rep(data$Target[index], dim(data$px)[2])))
p1 = ggplot(plot.dat, aes(x = Px, y = Py, group = motion, colour=tar)) + geom_path(alpha = .5) +
scale_colour_manual(values = plot.col.tar.list, guide = FALSE) + theme_bw() +
ylim(-20, 20) + xlim(-20, 20) + labs(x = "X", y = "Y")
p2 = ggplot(plot.dat, aes(x = t, y = Px, group = motion, colour=tar)) + geom_path(alpha = .5) +
scale_colour_manual(values = plot.col.tar.list, guide = FALSE) + theme_bw() +
ylim(-20, 20) + labs(x = "t* (msec)", y = expression(paste("P"^"X", "(t*)")))
p3 = ggplot(plot.dat, aes(x = t, y = Py, group = motion, colour=tar)) + geom_path(alpha = .5) +
scale_colour_manual(values = plot.col.tar.list, guide = FALSE) + theme_bw() +
ylim(-20, 20) + labs(x = "t* (msec)", y = expression(paste("P"^"Y", "(t*)")))
grid.arrange(p1,p2,p3, ncol = 3, nrow = 1)
})
} ## end server
D = 25
plot.col.tar.list = c("#EBC200", "#EB9D00", "#EB0000", "#990099", "#2600A2", "#005597", "#00BC00", "#BCE300")
unique.subjs = unique(data$Subject)
subj.list = 1:length(unique.subjs)
names(subj.list) = unique.subjs
hand.list = 1:2
names(hand.list) = c("Right", "Left")
shinyApp(ui = ui_kinematics, server = server_kinematics)
input$subject
server_kinematics = function(input, output){
output$kinem_plot <- renderPlot({
index = which(data$Subject == "Q437" & data$Hand == "Right")
plot.dat = data$px[index,] %>% melt %>% rename(., motion = Var1, t = Var2, Px = value) %>%
mutate(Py = melt(data$py[index,])[['value']]) %>%
mutate(tar = as.character(rep(data$Target[index], dim(data$px)[2])))
p1 = ggplot(plot.dat, aes(x = Px, y = Py, group = motion, colour=tar)) + geom_path(alpha = .5) +
scale_colour_manual(values = plot.col.tar.list, guide = FALSE) + theme_bw() +
ylim(-20, 20) + xlim(-20, 20) + labs(x = "X", y = "Y")
p2 = ggplot(plot.dat, aes(x = t, y = Px, group = motion, colour=tar)) + geom_path(alpha = .5) +
scale_colour_manual(values = plot.col.tar.list, guide = FALSE) + theme_bw() +
ylim(-20, 20) + labs(x = "t* (msec)", y = expression(paste("P"^"X", "(t*)")))
p3 = ggplot(plot.dat, aes(x = t, y = Py, group = motion, colour=tar)) + geom_path(alpha = .5) +
scale_colour_manual(values = plot.col.tar.list, guide = FALSE) + theme_bw() +
ylim(-20, 20) + labs(x = "t* (msec)", y = expression(paste("P"^"Y", "(t*)")))
grid.arrange(p1,p2,p3, ncol = 3, nrow = 1)
})
} ## end server
D = 25
plot.col.tar.list = c("#EBC200", "#EB9D00", "#EB0000", "#990099", "#2600A2", "#005597", "#00BC00", "#BCE300")
unique.subjs = unique(data$Subject)
subj.list = 1:length(unique.subjs)
names(subj.list) = unique.subjs
hand.list = 1:2
names(hand.list) = c("Right", "Left")
shinyApp(ui = ui_kinematics, server = server_kinematics)
D = 25
plot.col.tar.list = c("#EBC200", "#EB9D00", "#EB0000", "#990099", "#2600A2", "#005597", "#00BC00", "#BCE300")
unique.subjs = unique(data$Subject)
subj.list = 1:length(unique.subjs)
names(subj.list) = unique.subjs
hand.list = 1:2
names(hand.list) = c("Right", "Left")
shinyApp(ui = ui_kinematics, server = server_kinematics)
server_kinematics = function(input, output){
output$kinem_plot <- renderPlot({
index = which(data$Subject == "Q437" & data$Hand == hand.list[input$hand])
plot.dat = data$px[index,] %>% melt %>% rename(., motion = Var1, t = Var2, Px = value) %>%
mutate(Py = melt(data$py[index,])[['value']]) %>%
mutate(tar = as.character(rep(data$Target[index], dim(data$px)[2])))
p1 = ggplot(plot.dat, aes(x = Px, y = Py, group = motion, colour=tar)) + geom_path(alpha = .5) +
scale_colour_manual(values = plot.col.tar.list, guide = FALSE) + theme_bw() +
ylim(-20, 20) + xlim(-20, 20) + labs(x = "X", y = "Y")
p2 = ggplot(plot.dat, aes(x = t, y = Px, group = motion, colour=tar)) + geom_path(alpha = .5) +
scale_colour_manual(values = plot.col.tar.list, guide = FALSE) + theme_bw() +
ylim(-20, 20) + labs(x = "t* (msec)", y = expression(paste("P"^"X", "(t*)")))
p3 = ggplot(plot.dat, aes(x = t, y = Py, group = motion, colour=tar)) + geom_path(alpha = .5) +
scale_colour_manual(values = plot.col.tar.list, guide = FALSE) + theme_bw() +
ylim(-20, 20) + labs(x = "t* (msec)", y = expression(paste("P"^"Y", "(t*)")))
grid.arrange(p1,p2,p3, ncol = 3, nrow = 1)
})
} ## end server
D = 25
plot.col.tar.list = c("#EBC200", "#EB9D00", "#EB0000", "#990099", "#2600A2", "#005597", "#00BC00", "#BCE300")
unique.subjs = unique(data$Subject)
subj.list = 1:length(unique.subjs)
names(subj.list) = unique.subjs
hand.list = 1:2
names(hand.list) = c("Right", "Left")
shinyApp(ui = ui_kinematics, server = server_kinematics)
server_kinematics = function(input, output){
output$kinem_plot <- renderPlot({
index = which(data$Subject == subj.list[input$subject] & data$Hand == "Right")
plot.dat = data$px[index,] %>% melt %>% rename(., motion = Var1, t = Var2, Px = value) %>%
mutate(Py = melt(data$py[index,])[['value']]) %>%
mutate(tar = as.character(rep(data$Target[index], dim(data$px)[2])))
p1 = ggplot(plot.dat, aes(x = Px, y = Py, group = motion, colour=tar)) + geom_path(alpha = .5) +
scale_colour_manual(values = plot.col.tar.list, guide = FALSE) + theme_bw() +
ylim(-20, 20) + xlim(-20, 20) + labs(x = "X", y = "Y")
p2 = ggplot(plot.dat, aes(x = t, y = Px, group = motion, colour=tar)) + geom_path(alpha = .5) +
scale_colour_manual(values = plot.col.tar.list, guide = FALSE) + theme_bw() +
ylim(-20, 20) + labs(x = "t* (msec)", y = expression(paste("P"^"X", "(t*)")))
p3 = ggplot(plot.dat, aes(x = t, y = Py, group = motion, colour=tar)) + geom_path(alpha = .5) +
scale_colour_manual(values = plot.col.tar.list, guide = FALSE) + theme_bw() +
ylim(-20, 20) + labs(x = "t* (msec)", y = expression(paste("P"^"Y", "(t*)")))
grid.arrange(p1,p2,p3, ncol = 3, nrow = 1)
})
} ## end server
D = 25
plot.col.tar.list = c("#EBC200", "#EB9D00", "#EB0000", "#990099", "#2600A2", "#005597", "#00BC00", "#BCE300")
unique.subjs = unique(data$Subject)
subj.list = 1:length(unique.subjs)
names(subj.list) = unique.subjs
hand.list = 1:2
names(hand.list) = c("Right", "Left")
shinyApp(ui = ui_kinematics, server = server_kinematics)
subj.list
subj.list[1]
as.character(subj.list[input$subject])
as.character(subj.list[1])
name(subj.list[1])
name2(subj.list[1])
names(subj.list[1])
server_kinematics = function(input, output){
output$kinem_plot <- renderPlot({
index = which(data$Subject == names(subj.list[input$subject]) & data$Hand == "Right")
plot.dat = data$px[index,] %>% melt %>% rename(., motion = Var1, t = Var2, Px = value) %>%
mutate(Py = melt(data$py[index,])[['value']]) %>%
mutate(tar = as.character(rep(data$Target[index], dim(data$px)[2])))
p1 = ggplot(plot.dat, aes(x = Px, y = Py, group = motion, colour=tar)) + geom_path(alpha = .5) +
scale_colour_manual(values = plot.col.tar.list, guide = FALSE) + theme_bw() +
ylim(-20, 20) + xlim(-20, 20) + labs(x = "X", y = "Y")
p2 = ggplot(plot.dat, aes(x = t, y = Px, group = motion, colour=tar)) + geom_path(alpha = .5) +
scale_colour_manual(values = plot.col.tar.list, guide = FALSE) + theme_bw() +
ylim(-20, 20) + labs(x = "t* (msec)", y = expression(paste("P"^"X", "(t*)")))
p3 = ggplot(plot.dat, aes(x = t, y = Py, group = motion, colour=tar)) + geom_path(alpha = .5) +
scale_colour_manual(values = plot.col.tar.list, guide = FALSE) + theme_bw() +
ylim(-20, 20) + labs(x = "t* (msec)", y = expression(paste("P"^"Y", "(t*)")))
grid.arrange(p1,p2,p3, ncol = 3, nrow = 1)
})
} ## end server
D = 25
plot.col.tar.list = c("#EBC200", "#EB9D00", "#EB0000", "#990099", "#2600A2", "#005597", "#00BC00", "#BCE300")
unique.subjs = unique(data$Subject)
subj.list = 1:length(unique.subjs)
names(subj.list) = unique.subjs
hand.list = 1:2
names(hand.list) = c("Right", "Left")
shinyApp(ui = ui_kinematics, server = server_kinematics)
server_kinematics = function(input, output){
output$kinem_plot <- renderPlot({
index = 1:100 * input$subject
#which(data$Subject == names(subj.list[input$subject]) & data$Hand == "Right")
plot.dat = data$px[index,] %>% melt %>% rename(., motion = Var1, t = Var2, Px = value) %>%
mutate(Py = melt(data$py[index,])[['value']]) %>%
mutate(tar = as.character(rep(data$Target[index], dim(data$px)[2])))
p1 = ggplot(plot.dat, aes(x = Px, y = Py, group = motion, colour=tar)) + geom_path(alpha = .5) +
scale_colour_manual(values = plot.col.tar.list, guide = FALSE) + theme_bw() +
ylim(-20, 20) + xlim(-20, 20) + labs(x = "X", y = "Y")
p2 = ggplot(plot.dat, aes(x = t, y = Px, group = motion, colour=tar)) + geom_path(alpha = .5) +
scale_colour_manual(values = plot.col.tar.list, guide = FALSE) + theme_bw() +
ylim(-20, 20) + labs(x = "t* (msec)", y = expression(paste("P"^"X", "(t*)")))
p3 = ggplot(plot.dat, aes(x = t, y = Py, group = motion, colour=tar)) + geom_path(alpha = .5) +
scale_colour_manual(values = plot.col.tar.list, guide = FALSE) + theme_bw() +
ylim(-20, 20) + labs(x = "t* (msec)", y = expression(paste("P"^"Y", "(t*)")))
grid.arrange(p1,p2,p3, ncol = 3, nrow = 1)
})
} ## end server
D = 25
plot.col.tar.list = c("#EBC200", "#EB9D00", "#EB0000", "#990099", "#2600A2", "#005597", "#00BC00", "#BCE300")
unique.subjs = unique(data$Subject)
subj.list = 1:length(unique.subjs)
names(subj.list) = unique.subjs
hand.list = 1:2
names(hand.list) = c("Right", "Left")
shinyApp(ui = ui_kinematics, server = server_kinematics)
server_kinematics = function(input, output){
output$kinem_plot <- renderPlot({
print(input$subject)
index = 1:100 * input$subject
#which(data$Subject == names(subj.list[input$subject]) & data$Hand == "Right")
plot.dat = data$px[index,] %>% melt %>% rename(., motion = Var1, t = Var2, Px = value) %>%
mutate(Py = melt(data$py[index,])[['value']]) %>%
mutate(tar = as.character(rep(data$Target[index], dim(data$px)[2])))
p1 = ggplot(plot.dat, aes(x = Px, y = Py, group = motion, colour=tar)) + geom_path(alpha = .5) +
scale_colour_manual(values = plot.col.tar.list, guide = FALSE) + theme_bw() +
ylim(-20, 20) + xlim(-20, 20) + labs(x = "X", y = "Y")
p2 = ggplot(plot.dat, aes(x = t, y = Px, group = motion, colour=tar)) + geom_path(alpha = .5) +
scale_colour_manual(values = plot.col.tar.list, guide = FALSE) + theme_bw() +
ylim(-20, 20) + labs(x = "t* (msec)", y = expression(paste("P"^"X", "(t*)")))
p3 = ggplot(plot.dat, aes(x = t, y = Py, group = motion, colour=tar)) + geom_path(alpha = .5) +
scale_colour_manual(values = plot.col.tar.list, guide = FALSE) + theme_bw() +
ylim(-20, 20) + labs(x = "t* (msec)", y = expression(paste("P"^"Y", "(t*)")))
grid.arrange(p1,p2,p3, ncol = 3, nrow = 1)
})
} ## end server
D = 25
plot.col.tar.list = c("#EBC200", "#EB9D00", "#EB0000", "#990099", "#2600A2", "#005597", "#00BC00", "#BCE300")
unique.subjs = unique(data$Subject)
subj.list = 1:length(unique.subjs)
names(subj.list) = unique.subjs
hand.list = 1:2
names(hand.list) = c("Right", "Left")
shinyApp(ui = ui_kinematics, server = server_kinematics)
server_kinematics = function(input, output){
output$kinem_plot <- renderPlot({
print(input$subject)
index = 1:100 * as.numeric(input$subject)
#which(data$Subject == names(subj.list[input$subject]) & data$Hand == "Right")
plot.dat = data$px[index,] %>% melt %>% rename(., motion = Var1, t = Var2, Px = value) %>%
mutate(Py = melt(data$py[index,])[['value']]) %>%
mutate(tar = as.character(rep(data$Target[index], dim(data$px)[2])))
p1 = ggplot(plot.dat, aes(x = Px, y = Py, group = motion, colour=tar)) + geom_path(alpha = .5) +
scale_colour_manual(values = plot.col.tar.list, guide = FALSE) + theme_bw() +
ylim(-20, 20) + xlim(-20, 20) + labs(x = "X", y = "Y")
p2 = ggplot(plot.dat, aes(x = t, y = Px, group = motion, colour=tar)) + geom_path(alpha = .5) +
scale_colour_manual(values = plot.col.tar.list, guide = FALSE) + theme_bw() +
ylim(-20, 20) + labs(x = "t* (msec)", y = expression(paste("P"^"X", "(t*)")))
p3 = ggplot(plot.dat, aes(x = t, y = Py, group = motion, colour=tar)) + geom_path(alpha = .5) +
scale_colour_manual(values = plot.col.tar.list, guide = FALSE) + theme_bw() +
ylim(-20, 20) + labs(x = "t* (msec)", y = expression(paste("P"^"Y", "(t*)")))
grid.arrange(p1,p2,p3, ncol = 3, nrow = 1)
})
} ## end server
D = 25
plot.col.tar.list = c("#EBC200", "#EB9D00", "#EB0000", "#990099", "#2600A2", "#005597", "#00BC00", "#BCE300")
unique.subjs = unique(data$Subject)
subj.list = 1:length(unique.subjs)
names(subj.list) = unique.subjs
hand.list = 1:2
names(hand.list) = c("Right", "Left")
shinyApp(ui = ui_kinematics, server = server_kinematics)
ui_kinematics = function(){
fluidPage(
h2("Expected shape of reaching motions"),
fluidRow(
column(3,
selectInput("subject", label = ("Select Subject"), choices = unique.subjs, selected = "Q437"),
selectInput("hand", label = ("Hand Used"), choices = hand.list, selected = 1)
),
column(9,
plotOutput('kinem_plot', width = "750px", height = "250px")
)
)
)
}
unique.subjs
= 25
plot.col.tar.list = c("#EBC200", "#EB9D00", "#EB0000", "#990099", "#2600A2", "#005597", "#00BC00", "#BCE300")
unique.subjs = unique(data$Subject)
subj.list = 1:length(unique.subjs)
names(subj.list) = unique.subjs
hand.list = 1:2
names(hand.list) = c("Right", "Left")
shinyApp(ui = ui_kinematics, server = server_kinematics)
server_kinematics = function(input, output){
output$kinem_plot <- renderPlot({
index = which(data$Subject == input$subject & data$Hand == "Right")
plot.dat = data$px[index,] %>% melt %>% rename(., motion = Var1, t = Var2, Px = value) %>%
mutate(Py = melt(data$py[index,])[['value']]) %>%
mutate(tar = as.character(rep(data$Target[index], dim(data$px)[2])))
p1 = ggplot(plot.dat, aes(x = Px, y = Py, group = motion, colour=tar)) + geom_path(alpha = .5) +
scale_colour_manual(values = plot.col.tar.list, guide = FALSE) + theme_bw() +
ylim(-20, 20) + xlim(-20, 20) + labs(x = "X", y = "Y")
p2 = ggplot(plot.dat, aes(x = t, y = Px, group = motion, colour=tar)) + geom_path(alpha = .5) +
scale_colour_manual(values = plot.col.tar.list, guide = FALSE) + theme_bw() +
ylim(-20, 20) + labs(x = "t* (msec)", y = expression(paste("P"^"X", "(t*)")))
p3 = ggplot(plot.dat, aes(x = t, y = Py, group = motion, colour=tar)) + geom_path(alpha = .5) +
scale_colour_manual(values = plot.col.tar.list, guide = FALSE) + theme_bw() +
ylim(-20, 20) + labs(x = "t* (msec)", y = expression(paste("P"^"Y", "(t*)")))
grid.arrange(p1,p2,p3, ncol = 3, nrow = 1)
})
} ## end server
D = 25
plot.col.tar.list = c("#EBC200", "#EB9D00", "#EB0000", "#990099", "#2600A2", "#005597", "#00BC00", "#BCE300")
unique.subjs = unique(data$Subject)
subj.list = 1:length(unique.subjs)
names(subj.list) = unique.subjs
hand.list = 1:2
names(hand.list) = c("Right", "Left")
shinyApp(ui = ui_kinematics, server = server_kinematics)
ui_kinematics = function(){
fluidPage(
h2("Expected shape of reaching motions"),
fluidRow(
column(3,
selectInput("subject", label = ("Select Subject"), choices = subj.list, selected = subj.list[1]),
selectInput("hand", label = ("Hand Used"), choices = hand.list, selected = hand.list[1])
),
column(9,
plotOutput('kinem_plot', width = "750px", height = "250px")
)
)
)
}
D = 25
plot.col.tar.list = c("#EBC200", "#EB9D00", "#EB0000", "#990099", "#2600A2", "#005597", "#00BC00", "#BCE300")
subj.list = unique(data$Subject)
hand.list = c("Right", "Left")
shinyApp(ui = ui_kinematics, server = server_kinematics)
server_kinematics = function(input, output){
output$kinem_plot <- renderPlot({
index = which(data$Subject == input$subject & data$Hand == input$hand)
plot.dat = data$px[index,] %>% melt %>% rename(., motion = Var1, t = Var2, Px = value) %>%
mutate(Py = melt(data$py[index,])[['value']]) %>%
mutate(tar = as.character(rep(data$Target[index], dim(data$px)[2])))
p1 = ggplot(plot.dat, aes(x = Px, y = Py, group = motion, colour=tar)) + geom_path(alpha = .5) +
scale_colour_manual(values = plot.col.tar.list, guide = FALSE) + theme_bw() +
ylim(-20, 20) + xlim(-20, 20) + labs(x = "X", y = "Y")
p2 = ggplot(plot.dat, aes(x = t, y = Px, group = motion, colour=tar)) + geom_path(alpha = .5) +
scale_colour_manual(values = plot.col.tar.list, guide = FALSE) + theme_bw() +
ylim(-20, 20) + labs(x = "t* (msec)", y = expression(paste("P"^"X", "(t*)")))
p3 = ggplot(plot.dat, aes(x = t, y = Py, group = motion, colour=tar)) + geom_path(alpha = .5) +
scale_colour_manual(values = plot.col.tar.list, guide = FALSE) + theme_bw() +
ylim(-20, 20) + labs(x = "t* (msec)", y = expression(paste("P"^"Y", "(t*)")))
grid.arrange(p1,p2,p3, ncol = 3, nrow = 1)
})
} ## end server
D = 25
plot.col.tar.list = c("#EBC200", "#EB9D00", "#EB0000", "#990099", "#2600A2", "#005597", "#00BC00", "#BCE300")
subj.list = unique(data$Subject)
hand.list = c("Right", "Left")
shinyApp(ui = ui_kinematics, server = server_kinematics)
is.null(data$Visit)
is.null(data$Tem)
ui_kinematics = function(){
fluidPage(
h2("Expected shape of reaching motions"),
fluidRow(
column(3,
selectInput("subject", label = ("Select Subject"), choices = subj.list, selected = subj.list[1]),
if(TRUE) {selectInput("hand", label = ("Hand Used"), choices = hand.list, selected = hand.list[1])}
),
column(9,
plotOutput('kinem_plot', width = "750px", height = "250px")
)
)
)
}
shinyApp(ui = ui_kinematics, server = server_kinematics)
ui_kinematics = function(){
fluidPage(
h2("Expected shape of reaching motions"),
fluidRow(
column(3,
selectInput("subject", label = ("Select Subject"), choices = subj.list, selected = subj.list[1]),
if(FALSE) {selectInput("hand", label = ("Hand Used"), choices = hand.list, selected = hand.list[1])}
),
column(9,
plotOutput('kinem_plot', width = "750px", height = "250px")
)
)
)
}
shinyApp(ui = ui_kinematics, server = server_kinematics)
?sliderInput
levels(data$Visit)
if(!is.null(data$Visit)) {visit.list = levels(data$Visit)}
ui_kinematics = function(){
fluidPage(
h2("Expected shape of reaching motions"),
fluidRow(
column(3,
selectInput("subject", label = ("Select Subject"), choices = subj.list, selected = subj.list[1]),
selectInput("hand", label = ("Hand Used"), choices = hand.list, selected = hand.list[1]),
if(!is.null(data$Visit)){
selectInput("visit", label = ("Visit"), choices = visit.list, selected = visit.list[1])
}
),
column(9,
plotOutput('kinem_plot', width = "750px", height = "250px")
)
)
)
}
plot.col.tar.list = c("#EBC200", "#EB9D00", "#EB0000", "#990099", "#2600A2", "#005597", "#00BC00", "#BCE300")
subj.list = unique(data$Subject)
hand.list = c("Right", "Left")
if(!is.null(data$Visit)) {visit.list = levels(data$Visit)}
shinyApp(ui = ui_kinematics, server = server_kinematics)
subset(data, Subject == input$subject & Hand == input$hand, select = px) %>%
melt %>% rename(., motion = Var1, t = Var2, Px = value) %>%
mutate(Py = melt(data$py[index,])[['value']]) %>%
mutate(tar = as.character(rep(data$Target[index], dim(data$px)[2])))
subset(data, Subject == "Q437", select = px) %>%
melt %>% rename(., motion = Var1, t = Var2, Px = value) %>%
mutate(Py = melt(data$py[index,])[['value']]) %>%
mutate(tar = as.character(rep(data$Target[index], dim(data$px)[2])))
subset(data, Subject == input$subject & Hand == input$hand, select = px)
subset(data, Subject == "Q437", select = px)
dim(subset(data, Subject == "Q437", select = px))
subset(data, Subject == "Q437", select = px) %>% melt()
server_kinematics = function(input, output){
output$kinem_plot <- renderPlot({
if(!is.null(data$Visit)){
index = which(data$Subject == input$subject & data$Hand == input$hand)
} else {
index = which(data$Subject == input$subject & data$Hand == input$hand & data$Visit = input$visit)
}
plot.dat = data$px[index,] %>% melt %>% rename(., motion = Var1, t = Var2, Px = value) %>%
mutate(Py = melt(data$py[index,])[['value']]) %>%
mutate(tar = as.character(rep(data$Target[index], dim(data$px)[2])))
p1 = ggplot(plot.dat, aes(x = Px, y = Py, group = motion, colour=tar)) + geom_path(alpha = .5) +
scale_colour_manual(values = plot.col.tar.list, guide = FALSE) + theme_bw() +
ylim(-20, 20) + xlim(-20, 20) + labs(x = "X", y = "Y")
p2 = ggplot(plot.dat, aes(x = t, y = Px, group = motion, colour=tar)) + geom_path(alpha = .5) +
scale_colour_manual(values = plot.col.tar.list, guide = FALSE) + theme_bw() +
ylim(-20, 20) + labs(x = "t* (msec)", y = expression(paste("P"^"X", "(t*)")))
p3 = ggplot(plot.dat, aes(x = t, y = Py, group = motion, colour=tar)) + geom_path(alpha = .5) +
scale_colour_manual(values = plot.col.tar.list, guide = FALSE) + theme_bw() +
ylim(-20, 20) + labs(x = "t* (msec)", y = expression(paste("P"^"Y", "(t*)")))
grid.arrange(p1,p2,p3, ncol = 3, nrow = 1)
})
} ## end server
server_kinematics = function(input, output){
output$kinem_plot <- renderPlot({
if(!is.null(data$Visit)){
index = which(data$Subject == input$subject & data$Hand == input$hand)
} else {
index = which(data$Subject == input$subject & data$Hand == input$hand & data$Visit == input$visit)
}
plot.dat = data$px[index,] %>% melt %>% rename(., motion = Var1, t = Var2, Px = value) %>%
mutate(Py = melt(data$py[index,])[['value']]) %>%
mutate(tar = as.character(rep(data$Target[index], dim(data$px)[2])))
p1 = ggplot(plot.dat, aes(x = Px, y = Py, group = motion, colour=tar)) + geom_path(alpha = .5) +
scale_colour_manual(values = plot.col.tar.list, guide = FALSE) + theme_bw() +
ylim(-20, 20) + xlim(-20, 20) + labs(x = "X", y = "Y")
p2 = ggplot(plot.dat, aes(x = t, y = Px, group = motion, colour=tar)) + geom_path(alpha = .5) +
scale_colour_manual(values = plot.col.tar.list, guide = FALSE) + theme_bw() +
ylim(-20, 20) + labs(x = "t* (msec)", y = expression(paste("P"^"X", "(t*)")))
p3 = ggplot(plot.dat, aes(x = t, y = Py, group = motion, colour=tar)) + geom_path(alpha = .5) +
scale_colour_manual(values = plot.col.tar.list, guide = FALSE) + theme_bw() +
ylim(-20, 20) + labs(x = "t* (msec)", y = expression(paste("P"^"Y", "(t*)")))
grid.arrange(p1,p2,p3, ncol = 3, nrow = 1)
})
} ## end server
plot.col.tar.list = c("#EBC200", "#EB9D00", "#EB0000", "#990099", "#2600A2", "#005597", "#00BC00", "#BCE300")
subj.list = unique(data$Subject)
hand.list = c("Right", "Left")
if(!is.null(data$Visit)) {visit.list = levels(data$Visit)}
shinyApp(ui = ui_kinematics, server = server_kinematics)
server_kinematics = function(input, output){
output$kinem_plot <- renderPlot({
if(is.null(data$Visit)){
index = which(data$Subject == input$subject & data$Hand == input$hand)
} else {
index = which(data$Subject == input$subject & data$Hand == input$hand & data$Visit == input$visit)
}
plot.dat = data$px[index,] %>% melt %>% rename(., motion = Var1, t = Var2, Px = value) %>%
mutate(Py = melt(data$py[index,])[['value']]) %>%
mutate(tar = as.character(rep(data$Target[index], dim(data$px)[2])))
p1 = ggplot(plot.dat, aes(x = Px, y = Py, group = motion, colour=tar)) + geom_path(alpha = .5) +
scale_colour_manual(values = plot.col.tar.list, guide = FALSE) + theme_bw() +
ylim(-20, 20) + xlim(-20, 20) + labs(x = "X", y = "Y")
p2 = ggplot(plot.dat, aes(x = t, y = Px, group = motion, colour=tar)) + geom_path(alpha = .5) +
scale_colour_manual(values = plot.col.tar.list, guide = FALSE) + theme_bw() +
ylim(-20, 20) + labs(x = "t* (msec)", y = expression(paste("P"^"X", "(t*)")))
p3 = ggplot(plot.dat, aes(x = t, y = Py, group = motion, colour=tar)) + geom_path(alpha = .5) +
scale_colour_manual(values = plot.col.tar.list, guide = FALSE) + theme_bw() +
ylim(-20, 20) + labs(x = "t* (msec)", y = expression(paste("P"^"Y", "(t*)")))
grid.arrange(p1,p2,p3, ncol = 3, nrow = 1)
})
} ## end server
plot.col.tar.list = c("#EBC200", "#EB9D00", "#EB0000", "#990099", "#2600A2", "#005597", "#00BC00", "#BCE300")
subj.list = unique(data$Subject)
hand.list = c("Right", "Left")
if(!is.null(data$Visit)) {visit.list = levels(data$Visit)}
shinyApp(ui = ui_kinematics, server = server_kinematics)
library(devtools)
setwd("~/Dropbox/Work/Software/kinematics/")
document()
document()
document()
install()
document()
install()
library(kinematics)
head(Data)
dim(data)
plot_kinematics(data)
load("/Users/jeffgoldsmith/Desktop/FiveDayForDaniel 2.18.31 PM 3.07.42 PM.RDA")
plot_kinematics(data)
names(data)
getwd()
document()
rm(list = ls())
load("/Users/jeffgoldsmith/Documents/Data/MPL/Five Day Training/20151002_FiveDay_Kinematic.RDA")
plot_kinematics(data)
subj.list = unique(data$Subject)
hand.list = c("Right", "Left")
if(!is.null(data$Visit)) {visit.list = levels(data$Visit)}
shinyApp(ui = ui_kinematics, server = server_kinematics)
plot.col.tar.list = c("#EBC200", "#EB9D00", "#EB0000", "#990099", "#2600A2", "#005597", "#00BC00", "#BCE300")
shinyApp(ui = ui_kinematics, server = server_kinematics)
rm(ls())
rm(list = ls())
load("/Users/jeffgoldsmith/Documents/Data/MPL/Five Day Training/20151002_FiveDay_Kinematic.RDA")
shinyApp(ui = ui_kinematics, server = server_kinematics)
plot_kinematics(data)
?"shinyApp"
document()
install()
plot_kinematics(data)
document()
install()
plot_kinematics(data)
install()
plot_kinematics(data)
?grid.arrange
load("/Users/jeffgoldsmith/Desktop/FiveDayForDaniel.RDA")
plot_kinematics(data)
